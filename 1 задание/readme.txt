Создать первый абстрактный тип данных:
Сделать какой то класс (объект) для управление списка(использовать массив как буфер) , он должен включать в себя данные методы:
Add(int a) - добавить элемент в массив.
Insert(int a,int pos) - операция вставки (Элемент а перемещаем на индекс pos. Добавить проверку возможна ли вставка(Проверка на длину.При правильном использовании метод Insert должен вставить элемент a на позицию pos, то есть соседние элементы сдвигаются))
Delete(int pos) - метод который удаляет элементы на позиции pos
Clear() - чистит весь список
Int count - метод (get) посчитать количество элементов.
int this [int i] - метод индексотор, может быть как get так и set. Даёт возможность любой элемент изменить через set, и прочитать через get). Так же добавить проверку.
Cout () - метод для вывода (отладки, вывод списка) 

Сделать класс который предпологает хранение динамического списка (массива):
Наш объект ArrList хранит ссылку на буфер который представлен для нас как массив. 


Односвязный динамический список.Это структура данных, он строится таким образом: что каждый элемент этой структуры обеспечивает 
хранение данных(числа) и кроме этого содержит ссылку на такой же по структуре элемент, который хранит следующее значение.

Задание 2.
BaseList (Базовый класс):
int Count {get}
abstract void Add(int a)
abstract void Insert(int pos,int a)
abstract void Delete(int pos)
abstract void Clear();
abstract int this[int i] {set , get}
void print() //метод  который распечатывает, работает через Count и индексатор 
void Assign(BaseList sourse) // Метод клон A.Assign(B)
void AssignTo(BaseList dest) // Метод переноса данных
Метод BaseList Clone : B = A.clone()
Метод сортировки: virtual void Sort() На уровне ChainList перегрузить, и реализовать сортировку на уровне структуры. ;
Метод сравнивающий списки : bool IsEquelsBaseList ;



Добавить абстрактный класс, у которого потомками являются два класса реализации списков. Он должен содержать в себе методы которые содержат классы наследники. 
Надо реализовать индекстор в базовом классе для последющей перегрузки его в наследниках. Объявление индексатора как абстрактного на уровне базового класса для перегрузки в дочерних классах.
## Методы работы с данными
-  Разработка методов переноса данных (аса и приемник), где осуществляется передача данных между объектами.
-  Обеспечение переноски данных между объектами различных типов списков или массивов для равнозначности данных.
#  Реализовать методы клоны, должны отрабатывать разные конструкторы (перегрузка методов)
-  Реализовать сортировку по возрастанию.
