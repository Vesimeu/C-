1)Переделать BaseList<T>  where <T> : IComparable. В методе где производится сортировка изменить его под новый тип данных.
2)SaveToFile (String FileName) - Все данные нашего списка должен бросить в файл. Lood From File - данные из файла в список.
3)Ввести два типа пользовательских исключений Bad indexExeption и BadFileExeption. 
4)Заложим события в наши классы event...Change.(Сигналы между объектами системы).Это Event(C делигатом) который информирует всех подписчиков в случае изменения данных. То есть любое изменения Add, Accent, Delete, Accent, Чтение из файла и тд должно сопровождаться информируемым. 
5)Перегрузить ряд операций: "==" , "!=" , "+". - То есть для списков можно применить данные операторы. При операции "+" пусть возращает тип первого элемента. Для реализации использовать описанные методы (Clone, Add).
6)Классы списки сделать классами - шаблонами. Надо сделать чтобы наш класс мог поддерживать Foreach. Использовать какой-то итератор. Не использовать yield, использовать IEnumerator.


Какой формат данных должен использоваться при сохранении списка в файле?
Как обеспечить правильное сохранение данных в файл? текстовый файл, использую потоки.

Исключения BadIndexException и BadFileException:
Какие именно случаи должны вызывать исключения BadIndexException и BadFileException?
Какие сообщения об ошибках должны быть предоставлены пользователям при возникновении этих исключений?
Событие для оповещения об изменениях: На уровне тестовой функции отлавливать исключения. 

Какие события должны быть реализованы для оповещения об изменениях в списке (например, при добавлении, удалении элемента)? - При добавлении, удалении, любом изменении списка.
Какие делегаты следует использовать для этих событий? Делигат Change, который срабатывает при любом изменении списка, и должен содержать счётчик изменений дляя обоих списков(Сделать для этого отдельный метод).
Перегрузка операторов ==, !=, +:использовать стандартную функцию сравнения который (Equals)

Какие именно операции должны выполняться при перегрузке операторов ==, !=, +?
Какие проверки нужно осуществлять при выполнении этих операций?
- Чтобы можно использовать a = b + c, где a,b,c - это списки.

Метод CompareTo в интерфейсе IComparable: Использовать CompareTo, исподльзовать его там, где необходимо. 
- Добавить делигат для события.


Sort - использовать IComparable

Нужно ли использовать интерфейс IEnumerable который предоставляет возможность перебора элементов коллекции. В C# foreach цикл работает с типами, реализующими интерфейс IEnumerable. Или этот интерфейс должен содержать метод, который возвращает объект перечислителя